// <auto-generated />
using System;
using EShop.Repository.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EShop.Repository.Migrations
{
    [DbContext(typeof(EShopContext))]
    [Migration("20211019222155_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EShop.Repository.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FK_UserId")
                        .HasColumnType("int");

                    b.Property<int?>("FK_UserInformationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TotalOrderPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("OrderId");

                    b.HasIndex("FK_UserId");

                    b.HasIndex("FK_UserInformationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EShop.Repository.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Order")
                        .HasColumnType("int");

                    b.Property<int>("FK_Product")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("FK_Order");

                    b.HasIndex("FK_Product");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("EShop.Repository.Entities.PriceOffer", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnding")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStarted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<double>("NewPrice")
                        .HasColumnType("float");

                    b.Property<string>("OfferReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("PriceOffers");

                    b.HasData(
                        new
                        {
                            ProductId = 3,
                            DateEnding = new DateTime(2022, 10, 20, 0, 21, 55, 126, DateTimeKind.Local).AddTicks(8972),
                            DateStarted = new DateTime(2021, 10, 20, 0, 21, 55, 125, DateTimeKind.Local).AddTicks(2144),
                            NewPrice = 24.550000000000001,
                            OfferReason = "Too many bugs ingame"
                        });
                });

            modelBuilder.Entity("EShop.Repository.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Become Eivor, a legendary Viking raider on a quest for glory. Explore England's Dark Ages as you raid your enemies, grow your settlement, and build your political power.",
                            ImgUrl = "product_1.jpg",
                            InStock = false,
                            Name = "Assassin´s Creed Valhalla",
                            Price = 59.950000000000003,
                            Stock = 200
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Experience one of the most exciting and fast-changing periods of all time. Discover new technologies, continents, and societies. Build a new world in your image! All the ingredients are gathered for a memorable Anno experience. Travel throughout the world during the Industrial Revolution to write your own story!",
                            ImgUrl = "product_2.jpg",
                            InStock = false,
                            Name = "Anno 1800",
                            Price = 45.0,
                            Stock = 150
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Build a resistance from virtually anyone you see as you hack, infiltrate, and fight to take back a near-future London that is facing its downfall.",
                            ImgUrl = "product_3.jpg",
                            InStock = false,
                            Name = "Watch Dogs: Legion",
                            Price = 50.0,
                            Stock = 100
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "18th century, North America. Amidst the chaos and violence of the French and Indian War, Shay Patrick Cormac, a fearless young member of the Brotherhood of Assassin’s, undergoes a dark transformation that will forever shape the future of the American colonies.",
                            ImgUrl = "product_4.jpg",
                            InStock = false,
                            Name = "Assassin´s Creed Rogue",
                            Price = 11.949999999999999,
                            Stock = 15
                        },
                        new
                        {
                            ProductId = 5,
                            Description = "Squad up and breach in to explosive 5v5 PVP action. Tom Clancy's Rainbow Six Siege features a huge roster of specialized operators, each with game-changing gadgets to help you lead your team to victory.",
                            ImgUrl = "product_5.jpg",
                            InStock = false,
                            Name = "Tom Clancy´s Rainbow Six Siege",
                            Price = 24.949999999999999,
                            Stock = 1050
                        });
                });

            modelBuilder.Entity("EShop.Repository.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("ShoppingCartId");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            ShoppingCartId = 1,
                            TotalPrice = 0.0
                        },
                        new
                        {
                            ShoppingCartId = 2,
                            TotalPrice = 0.0
                        },
                        new
                        {
                            ShoppingCartId = 3,
                            TotalPrice = 0.0
                        });
                });

            modelBuilder.Entity("EShop.Repository.Entities.ShoppingCartProduct", b =>
                {
                    b.Property<int>("ShoppingCartProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Product")
                        .HasColumnType("int");

                    b.Property<int>("FK_ShoppingCart")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartProductId");

                    b.HasIndex("FK_Product");

                    b.HasIndex("FK_ShoppingCart");

                    b.ToTable("ShoppingCartProducts");
                });

            modelBuilder.Entity("EShop.Repository.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            IsAdmin = true,
                            Pin = 7571,
                            Username = "NicklasN757"
                        },
                        new
                        {
                            UserId = 2,
                            IsAdmin = false,
                            Pin = 4242,
                            Username = "PinkMan42"
                        },
                        new
                        {
                            UserId = 3,
                            IsAdmin = false,
                            Pin = 1234,
                            Username = "YoloSwagMC"
                        });
                });

            modelBuilder.Entity("EShop.Repository.Entities.UserInformation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserInformations");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Adress = "Nørre Havnegade 40",
                            City = "Sønderborg",
                            EMail = "1n2n3n4n5n@hotmail.dk",
                            FullName = "Nicklas M Nielsen"
                        },
                        new
                        {
                            UserId = 2,
                            Adress = "Carl Jacobsens Vej 25",
                            City = "København",
                            EMail = "CarlJacobsensVej@hotmail.com",
                            FullName = "Sven Petersen"
                        },
                        new
                        {
                            UserId = 3,
                            Adress = "Høffdingsvej 14",
                            City = "København",
                            EMail = "KildeSkolen@hotmail.com",
                            FullName = "John Jørgensen"
                        });
                });

            modelBuilder.Entity("EShop.Repository.Entities.Order", b =>
                {
                    b.HasOne("EShop.Repository.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("FK_UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EShop.Repository.Entities.UserInformation", "UserInformation")
                        .WithMany("Orders")
                        .HasForeignKey("FK_UserInformationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EShop.Repository.Entities.Product", null)
                        .WithMany("Orders")
                        .HasForeignKey("ProductId");

                    b.Navigation("User");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("EShop.Repository.Entities.OrderProduct", b =>
                {
                    b.HasOne("EShop.Repository.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("FK_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Repository.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("FK_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShop.Repository.Entities.PriceOffer", b =>
                {
                    b.HasOne("EShop.Repository.Entities.Product", "Product")
                        .WithOne("PriceOffer")
                        .HasForeignKey("EShop.Repository.Entities.PriceOffer", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShop.Repository.Entities.ShoppingCart", b =>
                {
                    b.HasOne("EShop.Repository.Entities.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("EShop.Repository.Entities.ShoppingCart", "ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EShop.Repository.Entities.ShoppingCartProduct", b =>
                {
                    b.HasOne("EShop.Repository.Entities.Product", "Product")
                        .WithMany("ShoppingCartProducts")
                        .HasForeignKey("FK_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Repository.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartProducts")
                        .HasForeignKey("FK_ShoppingCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("EShop.Repository.Entities.UserInformation", b =>
                {
                    b.HasOne("EShop.Repository.Entities.User", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("EShop.Repository.Entities.UserInformation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EShop.Repository.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("EShop.Repository.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Orders");

                    b.Navigation("PriceOffer");

                    b.Navigation("ShoppingCartProducts");
                });

            modelBuilder.Entity("EShop.Repository.Entities.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartProducts");
                });

            modelBuilder.Entity("EShop.Repository.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("EShop.Repository.Entities.UserInformation", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
